---
interface Props {
  title: string;
}

const { title } = Astro.props;

const items = [
  "/images/bano.png",
  "/images/broom1.png",
  "/images/broom2.png",
  "/images/cocina.png",
  "/images/comedorSala.png",
  "/images/exterior1.JPG",
  "/images/exterior2.JPG",
  "/images/salaComedor.png",
];
---

<section class="py-8 bg-white">
  <div class="container mx-auto px-4">
    <h2 class="text-3xl md:text-4xl font-semibold text-black mb-8 text-center">
      {title}
    </h2>
    
    <!-- Gallery Container -->
    <div class="gallery-container relative group overflow-hidden">
      <!-- Gallery Track -->
      <div class="gallery-track flex transition-transform duration-500 ease-in-out" style="transform: translateX(0%)">
        {
          items.map((item, index) => (
            <div 
              class="gallery-item flex-shrink-0 relative cursor-pointer"
              data-index={index}
              style="width: 85vw; height: 80vh; margin-right: 2vw;"
            >
              <img
                src={item}
                alt={`Imagen de galerÃ­a ${index + 1}`}
                class="w-full h-full object-cover rounded-lg"
                loading="lazy"
              />
              <!-- Overlay for hover effects -->
              <div class="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-10 transition-all duration-300 rounded-lg"></div>
            </div>
          ))
        }
      </div>
      
      <!-- Fullscreen Button Overlay -->
      <button 
        id="fullscreen-btn"
        class="absolute top-4 left-1/2 transform -translate-x-1/2 bg-white hover:bg-gray-100 text-black px-4 py-2 rounded-lg transition-all duration-300 font-medium opacity-0 group-hover:opacity-100 z-10"
      >
        Ver en pantalla completa
      </button>
      
      <!-- Navigation Buttons (Desktop Only) -->
      <button 
        class="nav-btn nav-prev hidden md:flex absolute left-4 top-1/2 transform -translate-y-1/2 bg-white rounded-full w-12 h-12 items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-300 hover:scale-110 z-10"
        aria-label="Imagen anterior"
      >
        <svg class="w-5 h-5 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      
      <button 
        class="nav-btn nav-next hidden md:flex absolute right-4 top-1/2 transform -translate-y-1/2 bg-white rounded-full w-12 h-12 items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-300 hover:scale-110 z-10"
        aria-label="Siguiente imagen"
      >
        <svg class="w-5 h-5 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
      
      <!-- Dots Indicator -->
      <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2 opacity-0 group-hover:opacity-100 transition-all duration-300">
        {
          items.map((_, index) => (
            <button 
              class="dot w-3 h-3 rounded-full bg-white bg-opacity-50 hover:bg-opacity-100 transition-all duration-300"
              data-index={index}
              aria-label={`Ir a imagen ${index + 1}`}
            ></button>
          ))
        }
      </div>
    </div>
  </div>
</section>

<!-- Fullscreen Modal -->
<div id="fullscreen-modal" class="fixed inset-0 bg-black bg-opacity-95 z-[99999] hidden items-center justify-center">
  <div class="relative w-full h-full flex items-center justify-center p-4">
    <!-- Close Button -->
    <button 
      id="close-modal"
      class="absolute top-6 right-6 bg-white hover:bg-gray-100 rounded-full w-12 h-12 flex items-center justify-center z-10 transition-all duration-300"
      aria-label="Cerrar"
    >
      <!-- X Icon -->
      <svg class="w-6 h-6 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
    
    <!-- Main Image -->
    <div class="relative max-w-[90vw] max-h-[90vh]">
      <img 
        id="modal-image"
        src=""
        alt=""
        class="max-w-full max-h-full object-contain rounded-lg"
      />
    </div>
    
    <!-- Navigation in Modal -->
    <button 
      id="modal-prev"
      class="absolute left-6 top-1/2 transform -translate-y-1/2 bg-white hover:bg-gray-100 rounded-full w-14 h-14 flex items-center justify-center transition-all duration-300"
      aria-label="Imagen anterior"
    >
      <!-- Left Arrow Icon -->
      <svg class="w-6 h-6 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>
    
    <button 
      id="modal-next"
      class="absolute right-6 top-1/2 transform -translate-y-1/2 bg-white hover:bg-gray-100 rounded-full w-14 h-14 flex items-center justify-center transition-all duration-300"
      aria-label="Siguiente imagen"
    >
      <!-- Right Arrow Icon -->
      <svg class="w-6 h-6 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>
    </button>
    
    <!-- Image Counter -->
    <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 bg-black bg-opacity-50 text-white px-4 py-2 rounded-full">
      <span id="image-counter">1 / {items.length}</span>
    </div>
  </div>
</div>

<style>
  .gallery-container {
    position: relative;
    height: 80vh;
    width: 100vw;
    margin-left: calc(-50vw + 50%);
    overflow: hidden;
    cursor: grab;
  }
  
  .gallery-container.dragging {
    cursor: grabbing;
  }
  
  .gallery-track {
    width: fit-content;
    padding-left: calc(50vw - 42.5vw);
  }
  
  .gallery-item.active {
    transform: scale(1);
  }
  
  .dot.active {
    background-color: white !important;
    opacity: 1;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .gallery-container {
      height: 70vh;
    }
    
    .gallery-item {
      width: 90vw !important;
      height: 70vh !important;
      margin-right: 5vw !important;
    }
    
    .gallery-track {
      padding-left: calc(50vw - 45vw);
    }
  }
  
  /* Smooth transitions for modal */
  #fullscreen-modal {
    transition: opacity 0.3s ease-in-out;
  }
  
  #fullscreen-modal.show {
    display: flex !important;
    opacity: 1;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const galleryContainer = document.querySelector(".gallery-container");
    const galleryTrack = document.querySelector(".gallery-track");
    const galleryItems = document.querySelectorAll(".gallery-item");
    const fullscreenBtn = document.getElementById("fullscreen-btn");
    const modal = document.getElementById("fullscreen-modal");
    const modalImage = document.getElementById("modal-image");
    const closeModal = document.getElementById("close-modal");
    const modalPrev = document.getElementById("modal-prev");
    const modalNext = document.getElementById("modal-next");
    const imageCounter = document.getElementById("image-counter");
    const navPrev = document.querySelector(".nav-prev");
    const navNext = document.querySelector(".nav-next");
    const dots = document.querySelectorAll(".dot");

    // Check if all required elements exist
    if (
      !modal ||
      !modalImage ||
      !closeModal ||
      !modalPrev ||
      !modalNext ||
      !imageCounter ||
      !fullscreenBtn ||
      !galleryTrack ||
      !galleryContainer
    ) {
      return;
    }

    let currentImageIndex = 0;
    const totalImages = galleryItems.length;
    let isDragging = false;
    let hasDragged = false;
    let startX = 0;
    let currentX = 0;
    let initialTransform = 0;
    const dragThreshold = 10; // Minimum distance to consider as drag

    // Function to update gallery position
    function updateGalleryPosition(index: number) {
      const isMobile = window.innerWidth <= 768;
      const itemWidth = isMobile ? 90 : 85; // 90vw for mobile, 85vw for desktop
      const margin = isMobile ? 5 : 2; // 5vw for mobile, 2vw for desktop
      const totalWidth = itemWidth + margin;
      const translateX = -index * totalWidth;
      
      if (galleryTrack) {
        (galleryTrack as HTMLElement).style.transform = `translateX(${translateX}vw)`;
      }
      
      // Update dots
      dots.forEach((dot, i) => {
        dot.classList.toggle('active', i === index);
      });
      
      currentImageIndex = index;
    }

    // Function to update modal image
    function updateModalImage(index: number) {
      const img = galleryItems[index].querySelector("img") as HTMLImageElement;
      if (img && modalImage && imageCounter) {
        (modalImage as HTMLImageElement).src = img.src;
        (modalImage as HTMLImageElement).alt = img.alt;
        imageCounter.textContent = `${index + 1} / ${totalImages}`;
        currentImageIndex = index;
      }
    }

    // Function to show modal
    function showModal() {
      if (modal) {
        updateModalImage(currentImageIndex);
        modal.classList.add("show");
        document.body.style.overflow = "hidden";
      }
    }

    // Function to hide modal
    function hideModal() {
      if (modal) {
        modal.classList.remove("show");
        document.body.style.overflow = "auto";
      }
    }

    // Function to go to next image
    function nextImage() {
      const nextIndex = (currentImageIndex + 1) % totalImages;
      updateGalleryPosition(nextIndex);
    }

    // Function to go to previous image
    function prevImage() {
      const prevIndex = (currentImageIndex - 1 + totalImages) % totalImages;
      updateGalleryPosition(prevIndex);
    }

    // Initialize gallery
    updateGalleryPosition(0);

    // Event listeners for gallery items (only for navigation, not fullscreen)
    galleryItems.forEach((item, index) => {
      item.addEventListener("click", (e) => {
        e.preventDefault();
        if (!hasDragged) {
          updateGalleryPosition(index);
        }
      });
    });

    // Event listeners for fullscreen button (ONLY way to open fullscreen)
    fullscreenBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      showModal();
    });

    // Event listeners for modal controls
    closeModal.addEventListener("click", hideModal);
    modalNext.addEventListener("click", () => {
      const nextIndex = (currentImageIndex + 1) % totalImages;
      updateModalImage(nextIndex);
    });
    modalPrev.addEventListener("click", () => {
      const prevIndex = (currentImageIndex - 1 + totalImages) % totalImages;
      updateModalImage(prevIndex);
    });

    // Event listeners for navigation buttons (with null checks)
    if (navNext) navNext.addEventListener("click", nextImage);
    if (navPrev) navPrev.addEventListener("click", prevImage);

    // Event listeners for dots
    dots.forEach((dot, index) => {
      dot.addEventListener("click", (e) => {
        e.stopPropagation();
        e.preventDefault();
        updateGalleryPosition(index);
      });
    });

    // Drag functionality for desktop
    function handleDragStart(clientX: number) {
      isDragging = true;
      hasDragged = false;
      startX = clientX;
      const currentTransform = (galleryTrack as HTMLElement).style.transform;
      const match = currentTransform.match(/translateX\(([^)]+)\)/);
      initialTransform = match ? parseFloat(match[1]) : 0;
      if (galleryContainer) galleryContainer.classList.add('dragging');
    }

    function handleDragMove(clientX: number) {
      if (!isDragging) return;
      
      currentX = clientX;
      const dragDistance = Math.abs(currentX - startX);
      
      // Only consider it a drag if moved beyond threshold
      if (dragDistance > dragThreshold) {
        hasDragged = true;
        const diffX = (currentX - startX) * 0.1; // Reduce sensitivity
        const newTransform = initialTransform + diffX;
        
        (galleryTrack as HTMLElement).style.transform = `translateX(${newTransform}vw)`;
      }
    }

    function handleDragEnd() {
      if (!isDragging) return;
      
      if (hasDragged) {
        const diff = currentX - startX;
        const threshold = 50;
        
        if (diff > threshold) {
          prevImage();
        } else if (diff < -threshold) {
          nextImage();
        } else {
          // Snap back to current position
          updateGalleryPosition(currentImageIndex);
        }
      }
      
      isDragging = false;
      hasDragged = false;
      if (galleryContainer) galleryContainer.classList.remove('dragging');
    }

    // Mouse events for desktop drag
    galleryContainer.addEventListener("mousedown", (e) => {
      handleDragStart((e as MouseEvent).clientX);
    });

    document.addEventListener("mousemove", (e) => {
      handleDragMove((e as MouseEvent).clientX);
    });

    document.addEventListener("mouseup", () => {
      handleDragEnd();
    });

    // Touch events for mobile
    galleryContainer.addEventListener("touchstart", (e) => {
      handleDragStart((e as TouchEvent).touches[0].clientX);
    });

    galleryContainer.addEventListener("touchmove", (e) => {
      e.preventDefault(); // Prevent scrolling
      handleDragMove((e as TouchEvent).touches[0].clientX);
    });

    galleryContainer.addEventListener("touchend", () => {
      handleDragEnd();
    });

    // Keyboard navigation
    document.addEventListener("keydown", (e) => {
      if (modal && modal.classList.contains("show")) {
        switch (e.key) {
          case "Escape":
            hideModal();
            break;
          case "ArrowRight":
            const nextModalIndex = (currentImageIndex + 1) % totalImages;
            updateModalImage(nextModalIndex);
            break;
          case "ArrowLeft":
            const prevModalIndex = (currentImageIndex - 1 + totalImages) % totalImages;
            updateModalImage(prevModalIndex);
            break;
        }
      } else {
        // Navigation in gallery view
        switch (e.key) {
          case "ArrowRight":
            nextImage();
            break;
          case "ArrowLeft":
            prevImage();
            break;
        }
      }
    });

    // Close modal when clicking outside image
    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        hideModal();
      }
    });

    // Handle window resize to recalculate positions
    window.addEventListener("resize", () => {
      updateGalleryPosition(currentImageIndex);
    });
  });
</script>
